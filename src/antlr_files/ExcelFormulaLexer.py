# Generated from ExcelFormula.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,41,299,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,
        5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,
        12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,
        16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,
        18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,
        20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,
        22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
        23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,
        25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,
        27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,29,1,
        29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,
        31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,
        33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,
        35,1,36,4,36,255,8,36,11,36,12,36,256,1,36,4,36,260,8,36,11,36,12,
        36,261,1,37,4,37,265,8,37,11,37,12,37,266,1,37,1,37,4,37,271,8,37,
        11,37,12,37,272,3,37,275,8,37,1,38,1,38,5,38,279,8,38,10,38,12,38,
        282,9,38,1,38,1,38,1,39,1,39,5,39,288,8,39,10,39,12,39,291,9,39,
        1,40,4,40,294,8,40,11,40,12,40,295,1,40,1,40,0,0,41,1,1,3,2,5,3,
        7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
        31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,
        53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,
        75,38,77,39,79,40,81,41,1,0,27,2,0,73,73,105,105,2,0,70,70,102,102,
        2,0,83,83,115,115,2,0,85,85,117,117,2,0,77,77,109,109,2,0,79,79,
        111,111,2,0,82,82,114,114,2,0,65,65,97,97,2,0,78,78,110,110,2,0,
        68,68,100,100,2,0,67,67,99,99,2,0,84,84,116,116,2,0,69,69,101,101,
        2,0,87,87,119,119,2,0,86,86,118,118,2,0,76,76,108,108,2,0,75,75,
        107,107,2,0,80,80,112,112,2,0,88,88,120,120,2,0,72,72,104,104,2,
        0,71,71,103,103,1,0,65,90,1,0,48,57,1,0,34,34,3,0,65,90,95,95,97,
        122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,306,0,1,1,
        0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
        0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,
        0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,
        0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,
        0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,
        0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,
        0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,
        0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,
        0,1,83,1,0,0,0,3,85,1,0,0,0,5,87,1,0,0,0,7,89,1,0,0,0,9,91,1,0,0,
        0,11,93,1,0,0,0,13,95,1,0,0,0,15,97,1,0,0,0,17,99,1,0,0,0,19,101,
        1,0,0,0,21,104,1,0,0,0,23,107,1,0,0,0,25,109,1,0,0,0,27,111,1,0,
        0,0,29,114,1,0,0,0,31,118,1,0,0,0,33,121,1,0,0,0,35,125,1,0,0,0,
        37,133,1,0,0,0,39,141,1,0,0,0,41,146,1,0,0,0,43,151,1,0,0,0,45,157,
        1,0,0,0,47,165,1,0,0,0,49,175,1,0,0,0,51,181,1,0,0,0,53,190,1,0,
        0,0,55,199,1,0,0,0,57,207,1,0,0,0,59,211,1,0,0,0,61,219,1,0,0,0,
        63,225,1,0,0,0,65,232,1,0,0,0,67,236,1,0,0,0,69,242,1,0,0,0,71,250,
        1,0,0,0,73,254,1,0,0,0,75,264,1,0,0,0,77,276,1,0,0,0,79,285,1,0,
        0,0,81,293,1,0,0,0,83,84,5,40,0,0,84,2,1,0,0,0,85,86,5,44,0,0,86,
        4,1,0,0,0,87,88,5,41,0,0,88,6,1,0,0,0,89,90,5,42,0,0,90,8,1,0,0,
        0,91,92,5,47,0,0,92,10,1,0,0,0,93,94,5,43,0,0,94,12,1,0,0,0,95,96,
        5,45,0,0,96,14,1,0,0,0,97,98,5,62,0,0,98,16,1,0,0,0,99,100,5,60,
        0,0,100,18,1,0,0,0,101,102,5,62,0,0,102,103,5,61,0,0,103,20,1,0,
        0,0,104,105,5,60,0,0,105,106,5,61,0,0,106,22,1,0,0,0,107,108,5,61,
        0,0,108,24,1,0,0,0,109,110,5,58,0,0,110,26,1,0,0,0,111,112,7,0,0,
        0,112,113,7,1,0,0,113,28,1,0,0,0,114,115,7,2,0,0,115,116,7,3,0,0,
        116,117,7,4,0,0,117,30,1,0,0,0,118,119,7,5,0,0,119,120,7,6,0,0,120,
        32,1,0,0,0,121,122,7,7,0,0,122,123,7,8,0,0,123,124,7,9,0,0,124,34,
        1,0,0,0,125,126,7,10,0,0,126,127,7,5,0,0,127,128,7,3,0,0,128,129,
        7,8,0,0,129,130,7,11,0,0,130,131,7,0,0,0,131,132,7,1,0,0,132,36,
        1,0,0,0,133,134,7,0,0,0,134,135,7,1,0,0,135,136,7,12,0,0,136,137,
        7,6,0,0,137,138,7,6,0,0,138,139,7,5,0,0,139,140,7,6,0,0,140,38,1,
        0,0,0,141,142,7,6,0,0,142,143,7,5,0,0,143,144,7,13,0,0,144,145,7,
        2,0,0,145,40,1,0,0,0,146,147,7,1,0,0,147,148,7,0,0,0,148,149,7,8,
        0,0,149,150,7,9,0,0,150,42,1,0,0,0,151,152,7,10,0,0,152,153,7,5,
        0,0,153,154,7,3,0,0,154,155,7,8,0,0,155,156,7,11,0,0,156,44,1,0,
        0,0,157,158,7,14,0,0,158,159,7,15,0,0,159,160,7,5,0,0,160,161,7,
        5,0,0,161,162,7,16,0,0,162,163,7,3,0,0,163,164,7,17,0,0,164,46,1,
        0,0,0,165,166,7,6,0,0,166,167,7,5,0,0,167,168,7,3,0,0,168,169,7,
        8,0,0,169,170,7,9,0,0,170,171,7,9,0,0,171,172,7,5,0,0,172,173,7,
        13,0,0,173,174,7,8,0,0,174,48,1,0,0,0,175,176,7,0,0,0,176,177,7,
        8,0,0,177,178,7,9,0,0,178,179,7,12,0,0,179,180,7,18,0,0,180,50,1,
        0,0,0,181,182,7,0,0,0,182,183,7,8,0,0,183,184,7,9,0,0,184,185,7,
        0,0,0,185,186,7,6,0,0,186,187,7,12,0,0,187,188,7,10,0,0,188,189,
        7,11,0,0,189,52,1,0,0,0,190,191,7,10,0,0,191,192,7,5,0,0,192,193,
        7,3,0,0,193,194,7,8,0,0,194,195,7,11,0,0,195,196,7,0,0,0,196,197,
        7,1,0,0,197,198,7,2,0,0,198,54,1,0,0,0,199,200,7,12,0,0,200,201,
        7,5,0,0,201,202,7,4,0,0,202,203,7,5,0,0,203,204,7,8,0,0,204,205,
        7,11,0,0,205,206,7,19,0,0,206,56,1,0,0,0,207,208,7,8,0,0,208,209,
        7,5,0,0,209,210,7,11,0,0,210,58,1,0,0,0,211,212,7,7,0,0,212,213,
        7,14,0,0,213,214,7,12,0,0,214,215,7,6,0,0,215,216,7,7,0,0,216,217,
        7,20,0,0,217,218,7,12,0,0,218,60,1,0,0,0,219,220,7,2,0,0,220,221,
        7,3,0,0,221,222,7,4,0,0,222,223,7,0,0,0,223,224,7,1,0,0,224,62,1,
        0,0,0,225,226,7,10,0,0,226,227,7,5,0,0,227,228,7,8,0,0,228,229,7,
        10,0,0,229,230,7,7,0,0,230,231,7,11,0,0,231,64,1,0,0,0,232,233,7,
        15,0,0,233,234,7,12,0,0,234,235,7,8,0,0,235,66,1,0,0,0,236,237,7,
        6,0,0,237,238,7,5,0,0,238,239,7,3,0,0,239,240,7,8,0,0,240,241,7,
        9,0,0,241,68,1,0,0,0,242,243,7,0,0,0,243,244,7,2,0,0,244,245,7,12,
        0,0,245,246,7,6,0,0,246,247,7,6,0,0,247,248,7,5,0,0,248,249,7,6,
        0,0,249,70,1,0,0,0,250,251,3,79,39,0,251,252,5,33,0,0,252,72,1,0,
        0,0,253,255,7,21,0,0,254,253,1,0,0,0,255,256,1,0,0,0,256,254,1,0,
        0,0,256,257,1,0,0,0,257,259,1,0,0,0,258,260,7,22,0,0,259,258,1,0,
        0,0,260,261,1,0,0,0,261,259,1,0,0,0,261,262,1,0,0,0,262,74,1,0,0,
        0,263,265,7,22,0,0,264,263,1,0,0,0,265,266,1,0,0,0,266,264,1,0,0,
        0,266,267,1,0,0,0,267,274,1,0,0,0,268,270,5,46,0,0,269,271,7,22,
        0,0,270,269,1,0,0,0,271,272,1,0,0,0,272,270,1,0,0,0,272,273,1,0,
        0,0,273,275,1,0,0,0,274,268,1,0,0,0,274,275,1,0,0,0,275,76,1,0,0,
        0,276,280,5,34,0,0,277,279,8,23,0,0,278,277,1,0,0,0,279,282,1,0,
        0,0,280,278,1,0,0,0,280,281,1,0,0,0,281,283,1,0,0,0,282,280,1,0,
        0,0,283,284,5,34,0,0,284,78,1,0,0,0,285,289,7,24,0,0,286,288,7,25,
        0,0,287,286,1,0,0,0,288,291,1,0,0,0,289,287,1,0,0,0,289,290,1,0,
        0,0,290,80,1,0,0,0,291,289,1,0,0,0,292,294,7,26,0,0,293,292,1,0,
        0,0,294,295,1,0,0,0,295,293,1,0,0,0,295,296,1,0,0,0,296,297,1,0,
        0,0,297,298,6,40,0,0,298,82,1,0,0,0,9,0,256,261,266,272,274,280,
        289,295,1,6,0,0
    ]

class ExcelFormulaLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    IF = 14
    SUM = 15
    OR = 16
    AND = 17
    COUNTIF = 18
    IFERROR = 19
    ROWS = 20
    FIND = 21
    COUNT = 22
    VLOOKUP = 23
    ROUNDDOWN = 24
    INDEX = 25
    INDIRECT = 26
    COUNTIFS = 27
    EOMONTH = 28
    NOT = 29
    AVERAGE = 30
    SUMIF = 31
    CONCAT = 32
    LEN = 33
    ROUND = 34
    ISERROR = 35
    SHEET_NAME = 36
    CELL = 37
    NUMBER = 38
    STRING = 39
    IDENTIFIER = 40
    WS = 41

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "','", "')'", "'*'", "'/'", "'+'", "'-'", "'>'", "'<'", 
            "'>='", "'<='", "'='", "':'" ]

    symbolicNames = [ "<INVALID>",
            "IF", "SUM", "OR", "AND", "COUNTIF", "IFERROR", "ROWS", "FIND", 
            "COUNT", "VLOOKUP", "ROUNDDOWN", "INDEX", "INDIRECT", "COUNTIFS", 
            "EOMONTH", "NOT", "AVERAGE", "SUMIF", "CONCAT", "LEN", "ROUND", 
            "ISERROR", "SHEET_NAME", "CELL", "NUMBER", "STRING", "IDENTIFIER", 
            "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "IF", 
                  "SUM", "OR", "AND", "COUNTIF", "IFERROR", "ROWS", "FIND", 
                  "COUNT", "VLOOKUP", "ROUNDDOWN", "INDEX", "INDIRECT", 
                  "COUNTIFS", "EOMONTH", "NOT", "AVERAGE", "SUMIF", "CONCAT", 
                  "LEN", "ROUND", "ISERROR", "SHEET_NAME", "CELL", "NUMBER", 
                  "STRING", "IDENTIFIER", "WS" ]

    grammarFileName = "ExcelFormula.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


